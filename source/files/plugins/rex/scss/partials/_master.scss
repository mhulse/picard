// @see http://blog.kaelig.fr/post/44554267597/please-respect-the-global-css-namespace
// @see http://www.aisleone.net/2009/design/8-ways-to-improve-your-typography/
// @see http://markboulton.co.uk/journal/five-simple-steps-to-better-typography
// @see http://webtypography.net/toc/
// @see http://alistapart.com/article/more-meaningful-typography
// @see http://modularscale.com/

// Unit conversion formulas.
// Assuming that your base font size is `16px` (or equivalent).
//
// PX to EM:
// Formula: [desired `font-size` in `px`] / [parent `font-size` in `px`]
// Example: 12px / 16px = .75em
//
// PX to %:
// Formula: ([desired `font-size` in `px`] / [parent `font-size` in `px`]) * 100
// Example: (12px / 16px) * 100 = 75%
//
// PX to PT:
// Formula: [desired `font-size` in `px`] * ([`pts` per `in`] / [`px` per `in`])
// Example: 16px * (72pt / 96px) = 12pt
//
// EM to PX:
// Formula: [desired `font-size` in `em`] * [parent `font-size` in `px`]
// Example: .75em * 16px = 12px
//
// EM to %:
// Formula: [desired `font-size` in `em`] * 100
// Example: .75em * 100 = 75%

// Baseline grid:
//
// Base font size = 16px or 100% or 1em.
// Base line height = 24px or 150% or 1.5em.
//
// When inside a "local" baseline, make sure all elements take up a
// vertical height (including margins) that are multiples of the base line
// height (e.g., `24`).
//
// Calculate line height by dividing base line height by desired font size.
//
// If the font size is greater than `24px`, then base your calculations on
// the next full `line-height` value up. For example, if the desired font
// size is `2.875em` (i.e. `46px`), the math would be:
//
// (`1.5` * `2`) / `2.875` = `1.04347826086957`
//
// Line height chart:
//                       |                   |                              |                                |                            |                                 |
// Target `line-height`: | x1 = 24px = 1.5em | x2 = 48px = 3em              | x3 = 72px = 4.5em              | x4 = 96px = 6em            | x5 = 120px = 7.5em              |
//  Min/max `font-size`: | 0 - 24px (1.5em)  | 25px (1.5625em) - 48px (3em) | 49px (3.0625em) - 72px (4.5em) | 73px (4.5625) - 96px (6em) | 97px (6.0625em) - 120px (7.5em) |
//                       |                   |                              |                                |                            |                                 |
//
// Use these values for `line-height` offsets:
//           |      |     |      |     |      |     |      |
// Fraction: | 1/8  | 1/4 | 3/8  | 1/2 | 5/8  | 3/4 | 7/8  |
//  Decimal: | .125 | .25 | .375 | .5  | .625 | .75 | .875 |
//           |      |     |      |     |      |     |      |
//
// Important: WebKit needs at least ten-millionth decimal places; for
// example: `line-height: 1.3333333;` (that's 7 decimal places).

//======================================================================
// BOX MODEL NORMALIZE
//======================================================================

// Apply a "natural" box layout model to all elements.
//
// @see http://www.paulirish.com/2012/box-sizing-border-box-ftw/
// @see http://css-tricks.com/box-sizing/
// @see https://developer.mozilla.org/docs/web/css/universal_selectors
// @see https://developer.mozilla.org/docs/web/css/box-sizing
// @see https://github.com/twbs/bootstrap

@if $flag_natural-box-model {
	
	* {
		
		&,
		&::before,
		&::after {
			-webkit-box-sizing: border-box;
			   -moz-box-sizing: border-box;
			        box-sizing: border-box;
		}
		
	}
	
}

//======================================================================
// BASELINE
//======================================================================

// Baseline grid class.
//
// It simulates a baseline grid based on `em`/`rems` which will allow you
// to size according to your site's `font-size`.
//
// Important: Added to `<body>`:
//
// `<body ontouchstart="">...</body>`
//
// @see https://gist.github.com/4277585
// @see http://advent2012.digitpaint.nl/13/
// @see http://stackoverflow.com/a/8905262/922323
// @see http://css-tricks.com/browser-support-pseudo-elements/
// @see http://learn.shayhowe.com/advanced-html-css/complex-selectors
// @see http://stackoverflow.com/a/8877902/922323
// @see https://coderwall.com/p/jsb-vw

@if $flag_baseline {
	
	.#{$NS}baseline { @include baseline-grid; }
	
}

//======================================================================
// ROOT ELEMENT
//======================================================================

// The `<html>` element represents the root of an HTML document.
//
// @see http://pxtoem.com/
// @see https://developer.mozilla.org/docs/web/html/element/html
// @see http://dev.w3.org/html5/spec#the-html-element
// @see http://ç.whatwg.org#the-html-element

html {}

//======================================================================
// SECTIONS
//======================================================================

// The `<body>` element represents the main content of the document.
//
// @see https://gist.github.com/4277585
// @see http://advent2012.digitpaint.nl/13/
// @see http://www.netmagazine.com/tutorials/preserving-vertical-rhythm-css-and-jquery
// @see http://www.awayback.com/revised-font-stack/
// @see http://code.stephenmorley.org/html-and-css/the-myth-of-web-safe-fonts/
// @see http://stackoverflow.com/questions/2703056/body-font-size-100-01-vs-body-font-size-100
// @see http://www.sitepoint.com/typography-baseline-rhythm-deciphered/
// @see http://modularscale.com/scale/?px1=16&px2=40&ra1=1.618&ra2=0
// @see https://developer.mozilla.org/docs/web/html/element/body
// @see https://developer.mozilla.org/docs/web/css/font-smooth
// @see http://dev.w3.org/html5/spec#the-body-element
// @see http://ç.whatwg.org#the-body-element

body {
	font-size: 100%;
	line-height: relative($base_line-height);
}

//----------------------------------------------------------------------

// Represents the contact information for its enclosing section. If it is
// a child of the body element, then it applies to the document as a whole.
//
// @see https://developer.mozilla.org/docs/web/html/element/address
// @see http://dev.w3.org/html5/spec#the-address-element
// @see http://ç.whatwg.org#the-address-element

address {
	@include baseline(16, .75);
	margin: #{relative(12)}rem 0;
}

// The `<article>` element represents a section of a page that consists of
// a composition that forms an independent part of a document, page, or
// site. This could be a forum post, a magazine or newspaper article, a
// Web log entry, a user-submitted comment, or any other independent item
// of content.
//
// @see https://developer.mozilla.org/docs/web/html/element/article
// @see http://dev.w3.org/html5/spec#the-article-element
// @see http://ç.whatwg.org#the-article-element

article {}

// The `<aside>` element represents a section of a page consisting of
// content that is tangentially related to the content around the
// `<aside>` element, and which could be considered separate from that
// content. Such sections are often represented as sidebars in printed
// typography.
//
// @see https://developer.mozilla.org/docs/web/html/element/aside
// @see http://dev.w3.org/html5/spec#the-aside-element
// @see http://ç.whatwg.org#the-aside-element

aside {}

// The `<footer>` element represents the "footer" of a document or section
// of a document. It typically contains metadata about its enclosing
// section, such as who wrote it, links to related documents, copyright
// data, etc. Contact information for the section given in a footer should
// be marked up using the address element.
//
// @see https://developer.mozilla.org/docs/web/html/element/footer
// @see http://dev.w3.org/html5/spec#the-footer-element
// @see http://ç.whatwg.org#the-footer-element

footer {}

// Represent headings and subheadings. These elements rank in importance
// according to the number in their name. The `<h1>` element is said to
// have the highest rank, the `<h6>` element has the lowest rank, and two
// elements with the same name have equal rank.
//
// Note: The `.h1`-`.h6` classes should be used to maintain the
// semantically appropriate heading levels.
//
// Attention: Classes NOT for use on non-headings.
//
// @see https://groups.google.com/d/topic/object-oriented-css/GE1uzU2Bu48/discussion
// @see http://www.stubbornella.org/content/2011/09/06/style-headings-using-html5-sections/
// @see https://github.com/stubbornella/oocss/blob/master/core/heading/heading.css
// @see http://csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css/
// @see https://developer.mozilla.org/docs/web/html/element/heading_elements
// @see http://dev.w3.org/html5/spec#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements
// @see http://ç.whatwg.org#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements

h1,
h2,
h3,
h4,
h5,
h6,
%h1-h2-h3-h4-h5-h6 {
	@include baseline(16);
	margin: 0 0 .125em;
}

h1,
%h1 { @include baseline(46); }

h2,
%h2 { @include baseline(40, .875); }

h3,
%h3 { @include baseline(34, .75); }

h4,
%h4 { @include baseline(28, .625); }

h5,
%h5 { @include baseline(22); }

h6,
%h6 { @include baseline(18, .875); }

@if $flag_heading-classes {
	
	.#{$NS}h1,
	.#{$NS}h2,
	.#{$NS}h3,
	.#{$NS}h4,
	.#{$NS}h5,
	.#{$NS}h6 { @extend %h1-h2-h3-h4-h5-h6; }
	
	.#{$NS}h1 { @extend %h1; }
	.#{$NS}h2 { @extend %h2; }
	.#{$NS}h3 { @extend %h3; }
	.#{$NS}h4 { @extend %h4; }
	.#{$NS}h5 { @extend %h5; }
	.#{$NS}h6 { @extend %h6; }
	
}

@if $flag_subheading-classes {
	
	.#{$NS}sh1,
	.#{$NS}sh2,
	.#{$NS}sh3,
	.#{$NS}sh4,
	.#{$NS}sh5,
	.#{$NS}sh6 { @extend %h1-h2-h3-h4-h5-h6; }
	
	.#{$NS}sh1,
	.#{$NS}sh2,
	.#{$NS}sh3,
	.#{$NS}sh4,
	.#{$NS}sh5,
	.#{$NS}sh6 { font-weight: normal; }
	
	.#{$NS}sh1 { @extend %h1; }
	.#{$NS}sh2 { @extend %h2; }
	.#{$NS}sh3 { @extend %h3; }
	.#{$NS}sh4 { @extend %h4; }
	.#{$NS}sh5 { @extend %h5; }
	.#{$NS}sh6 { @extend %h6; }
	
}

// The `<header>` element represents the "header" of a document or section
// of a document. It is typically used to group a set of `<h1>`–`<h6>`
// elements to mark up a page's title with its subtitle or tagline. header
// elements may, however, contain more than just the section's headings
// and subheadings — e.g., version history information or publication date.
//
// @see https://developer.mozilla.org/docs/web/html/element/header
// @see http://dev.w3.org/html5/spec#the-header-element
// @see http://ç.whatwg.org#the-header-element

header {}

// The main element is an exact analogue of ARIA's `role="main"`, and is
// designed to show screenreaders and assistive technologies exactly where
// main content begins, so it can be a target for a "skip links" keyboard
// command, for example. It could also be used for content syndication;
// mobile browsers could zoom in on main when encountering non-responsive
// websites. It should therefore be used once per page. If you use
// something like `<div id="main">` (or similar, such as `<div
// id="content">`), simply replace that with `<main role="main">`.
//
// @see https://developer.mozilla.org/docs/web/html/element/main
// @see http://dev.w3.org/html5/spec#the-main-element
// @see http://ç.whatwg.org#the-main-element

main {}

// The `<nav>` element represents navigation for a document. It is a
// section containing links to other documents or to parts within the
// current document.
//
// Not all groups of links on a page need to be in a this element — only
// groups of primary navigation links. In particular, it is common for
// footers to have a list of links to various key parts of a site, but the
// `<footer>` element is more appropriate in such cases.
//
// @see https://developer.mozilla.org/docs/web/html/element/nav
// @see http://dev.w3.org/html5/spec#the-nav-element
// @see http://ç.whatwg.org#the-nav-element

nav {}

// The `<section>` element represents a generic document or application
// section. In this context, a section is a thematic grouping of content,
// typically with a header, possibly with a footer. Examples include
// chapters in a book, the various tabbed pages in a tabbed dialog box, or
// the numbered sections of a thesis. A web site's home page could be
// split into sections for an introduction, news items, contact information.
//
// @see https://developer.mozilla.org/docs/web/html/element/section
// @see http://dev.w3.org/html5/spec#the-section-element
// @see http://ç.whatwg.org#the-section-element

section {}

//======================================================================
// GROUPING CONTENT
//======================================================================

// The `<blockquote>` element represents a section that is quoted from
// another source.
//
// Content inside a `<blockquote>` must be quoted from another source,
// whose address, if it has one, may be cited in the `cite` attribute.
//
// American English quoting rules:
//
// 1) Periods and commas always go inside quotation marks, even inside single
//    quotes.
// 2) The placement of question marks with quotes follows logic. If a
//    question is in quotation marks, the question mark should be placed
//    inside the quotation marks.
// 3) When you have a question outside quoted material AND inside quoted
//    material, use only one question mark and place it inside the quotation
//    mark.
// 4) Use single quotation marks for quotes within quotes. Note that the
//    period goes inside all quote marks.
// 5) Use quotation marks to set off a direct quotation only.
// 6) Do not use quotation marks on a direct quotation that is more than
//    three lines in length; instead, use a colon. In this situation, leave a
//    blank line above and below the quoted material. Single space the long
//    quotation. Some style manuals say to indent one-half inch on both the
//    left and right margins; others say to indent only on the left margin.
// 7) When you are quoting something that has a spelling or grammar mistake
//    or presents material in a confusing way, insert the term sic in italics
//    and enclose it in brackets. Sic means, "This is the way the original
//    material was."
//
// @see http://www.grammarbook.com/punctuation/quotes.asp
// @see http://www.grammarbook.com/punctuation/colons.asp
// @see http://html5doctor.com/blockquote-q-cite/
// @see http://www.markinns.com/articles/full/hanging_quotation_marks
// @see http://www.studiopress.com/design/how-to-use-block-quotes.htm
// @see http://monc.se/kitchen/129/rendering-quotes-with-css
// @see http://www.456bereastreet.com/archive/200411/quotations_and_citations_quoting_text/
// @see http://www.smashingmagazine.com/2008/06/12/block-quotes-and-pull-quotes-examples-and-good-practices/
// @see https://developer.mozilla.org/docs/web/html/element/blockquote
// @see http://dev.w3.org/html5/spec#the-blockquote-element
// @see http://ç.whatwg.org#the-blockquote-element

blockquote {
	
	margin: #{relative(12)}rem #{relative(24)}rem;
	
	& > :first-child { margin-top: 0 !important; }
	& > :last-child { margin-bottom: 0 !important; }
	
}

// The `<div>` element has no special meaning at all. It represents its
// children. It can be used with the `class`, `lang`, and `title`
// attributes to mark up semantics common to a group of consecutive
// elements.
//
// @see https://developer.mozilla.org/docs/web/html/element/div
// @see http://dev.w3.org/html5/spec#the-div-element
// @see http://ç.whatwg.org#the-div-element

div {}

// The `<dl>` (description list) element represents a description list
// consisting of zero or more name-value groups. Each group must consist
// of one or more names (dt elements) each followed by one or more values
// (dd elements).
//
// Name-value groups may be terms and definitions, metadata topics and
// values, or any other groups of name-value data. The values within a
// group are alternatives; multiple paragraphs forming part of the same
// value must all be given within the same dd element.
//
// The `<dt>` (description term) element represents the term, or name,
// part of a term-description group in a description list (`<dl>` element).
//
// The `<dd>` (description definition) element represents the description,
// definition, or value, part of a term-description group in a description
// list (`<dl>` element).
//
// @see http://www.maxdesign.com.au/articles/definition/
// @see https://developer.mozilla.org/docs/web/html/element/dl
// @see https://developer.mozilla.org/docs/web/html/element/dt
// @see https://developer.mozilla.org/docs/web/html/element/dd
// @see http://dev.w3.org/html5/spec#the-dl-element
// @see http://ç.whatwg.org#the-dl-element
// @see http://dev.w3.org/html5/spec#the-dt-element
// @see http://ç.whatwg.org#the-dt-element
// @see http://dev.w3.org/html5/spec#the-dd-element
// @see http://ç.whatwg.org#the-dd-element

dl {
	
	@include baseline(16, .75);
	margin: #{relative(12)}rem 0;
	padding: 0;
	
	& dt,
	dd {
		margin: 0 0 #{relative(6)}rem;
		padding: 0;
	}
	
	& dd { margin-left: #{relative(8)}rem; }
	
}

// The `<figure>` element represents some flow content, optionally with a
// caption, that is self-contained and is typically referenced as a single
// unit from the main flow of the document.
//
// The figure element can be used to annotate illustrations, diagrams,
// photos, code listings, etc., that are referenced in the main content of
// the document, but that could, without affecting the flow of the
// document, be moved away from that primary content — e.g., to the side
// of the page, to dedicated pages, or to an appendix.
//
// The `<figcaption>` element represents a caption or legend for the rest
// of the contents of the `<figcaption>` element's parent figure element,
// if any.
//
// @see https://developer.mozilla.org/docs/web/html/element/figure
// @see https://developer.mozilla.org/docs/web/html/element/figcaption
// @see http://dev.w3.org/html5/spec#the-figure-element
// @see http://ç.whatwg.org#the-figure-element
// @see http://dev.w3.org/html5/spec#the-figcaption-element
// @see http://ç.whatwg.org#the-figcaption-element

figure {
	
	margin: #{relative(12)}rem 0;
	
	& figcaption {
		
		@include baseline(14, .875);
		
		& p { font-size: inherit; }
		
		& > :first-child { margin-top: 0 !important; }
		& > :last-child { margin-bottom: 0 !important; }
		
	}
	
}

// The `<hr>` element represents a paragraph-level thematic break. It
// separates different topics within a section of prose, or between scenes
// in a novel.
//
// @see https://gist.github.com/4277585
// @see https://github.com/h5bp/html5-boilerplate/blob/b378ce239dfb017e32fbeacc5ab0346258b089e2/css/main.css#L42-L53
// @see https://github.com/twitter/bootstrap/blob/070c125ceceb2a164773f51226950350445160ee/docs/assets/css/bootstrap.css#L876-L881
// @see http://www.maxdesign.com.au/articles/hr/
// @see https://developer.mozilla.org/docs/web/html/element/hr
// @see http://dev.w3.org/html5/spec#the-hr-element
// @see http://ç.whatwg.org#the-hr-element

hr,
.#{$NS}hr {
	border: 0;
	border-top-width: #{relative(1)}rem;
	border-style: solid;
	height: 0;
	margin: #{relative(12)}rem 0;
	padding: 0;
	-moz-box-sizing: content-box;
	     box-sizing: content-box;
}

// The `<ol>` element represents a list of items, where the items have
// been intentionally ordered, such that changing the order would change
// the meaning of the list.
//
// The `<li>` element represents a list item. If its parent element is an
// `<ol>`, `<ul>`, or `<menu>` element, then the element is an item of the
// parent element's list, as defined for those elements. Otherwise, the
// list item has no defined list-related relationship to any other `<li>`
// element.
//
// @see https://developer.mozilla.org/docs/web/html/element/ol
// @see https://developer.mozilla.org/docs/web/html/element/li
// @see http://dev.w3.org/html5/spec#the-ol-element
// @see http://ç.whatwg.org#the-ol-element
// @see http://dev.w3.org/html5/spec#the-li-element
// @see http://ç.whatwg.org#the-li-element

ol,
%ol {
	
	@include baseline(16, .75);
	margin: #{relative(12)}rem 0;
	padding: 0;
	list-style-position: outside;
	
	& li {
		margin: 0 0 #{baseline(16, .25)}rem; // (1.5 * .25) = .375 (6px)
		padding: 0;
	}
	
	& li img {
		display: inline;
		vertical-align: top;
	}
	
}

ol {
	
	margin-left: #{relative(40)}rem;
	
	li & { margin-left: #{relative(40)}rem; }
	
}

// The `<p>` element represents a paragraph.
//
// @see https://developer.mozilla.org/docs/web/html/element/p
// @see http://dev.w3.org/html5/spec#the-p-element
// @see http://ç.whatwg.org#the-p-element

p {
	@include baseline(16);
	margin: #{baseline(16, .5)}rem 0; // (1.5 / 2) = .75
}

// The `<pre>` element represents a block of preformatted text, in which
// structure is represented by typographic conventions rather than by
// elements.
//
// @see https://raw.github.com/twitter/bootstrap/master/docs/assets/css/bootstrap.css
// @see http://perishablepress.com/wrapping-content/
// @see http://perishablepress.com/perfect-pre-tags/
// @see https://developer.mozilla.org/docs/web/html/element/pre
// @see http://dev.w3.org/html5/spec#the-pre-element
// @see http://ç.whatwg.org#the-pre-element

pre {
	@include baseline(14, .75);
	margin: #{relative(12)}rem 0;
}

// The `<ul>` element represents a list of items, where the order of the
// items is not important — that is, where changing the order would not
// materially change the meaning of the list.
//
// @see https://developer.mozilla.org/docs/web/html/element/ul
// @see http://dev.w3.org/html5/spec#the-ul-element
// @see http://ç.whatwg.org#the-ul-element

ul { @extend %ol; }

ul {
	
	margin-left: #{relative(24)}rem;
	
	li & { margin-left: #{relative(8)}rem; }
	
}

//======================================================================
// TEXT-LEVEL SEMANTICS
//======================================================================

// If the `<a>` element has an `href` attribute, then it represents a
// hyperlink (a hypertext anchor). If the `<a>` element has no `href`
// attribute, then the element represents a placeholder for where a link
// might otherwise have been placed, if it had been relevant.
//
// The `target`, `rel`, `media`, `hreflang` and `type` attributes must be
// omitted if the `href` attribute is not present.
//
// @see http://camendesign.com/code/uth2_css3-hyperlinks
// @see https://developer.mozilla.org/docs/web/html/element/a
// @see http://dev.w3.org/html5/spec#the-a-element
// @see http://ç.whatwg.org#the-a-element

a {}

// The `<abbr>` element represents an abbreviation or acronym. The
// optional `title` attribute may be used to provide an expansion of the
// abbreviation. If specified, the `title` attribute must contain an
// expansion of the abbreviation and nothing else.
//
// @see http://www.maxdesign.com.au/articles/abbreviations/
// @see http://html5doctor.com/the-abbr-element/
// @see http://camendesign.com/code/abbr_redux
// @see https://developer.mozilla.org/docs/web/html/element/abbr
// @see http://dev.w3.org/html5/spec#the-abbr-element
// @see http://ç.whatwg.org#the-abbr-element

abbr {}

// The `<b>` element represents a span of text to be stylistically offset
// from the normal prose without conveying any extra importance. Examples
// are key words in a document abstract, product names in a review, or
// other spans of text whose typical typographic presentation is bold.
//
// The `<b>` element should be used as a last resort when no other element
// is more appropriate. In particular, headings should use the `<h1>` to
// `<h6>` elements, stress emphasis should use the `<em>` element,
// importance should be denoted with the `<strong>` element, and text
// marked or highlighted should use the `<mark>` element.
//
// @see https://developer.mozilla.org/docs/web/html/element/b
// @see http://dev.w3.org/html5/spec#the-b-element
// @see http://ç.whatwg.org#the-b-element

b {}

// The `<bdi>` element represents a span of text that is to be isolated
// from its surroundings for the purposes of bidirectional text formatting.
//
// @see http://stackoverflow.com/a/8546564/922323
// @see https://developer.mozilla.org/docs/web/html/element/bdi
// @see http://dev.w3.org/html5/spec#the-rp-element
// @see http://ç.whatwg.org#the-rp-element

bdi {}

// The `<bdo>` element represents explicit text directionality formatting
// control for its children. It allows authors to override the Unicode
// bidirectional algorithm by explicitly specifying a direction override.
//
// @see https://developer.mozilla.org/docs/web/html/element/bdo
// @see http://dev.w3.org/html5/spec#the-bdo-element
// @see http://ç.whatwg.org#the-bdo-element

bdo {}

// The `<br>` element represents a line break. `<br>` elements must be
// used only for line breaks that are actually part of the content, as in
// poems or addresses. `<br>` elements must not be used for separating
// thematic groups in a paragraph.
//
// @see https://developer.mozilla.org/docs/web/html/element/br
// @see http://dev.w3.org/html5/spec#the-br-element
// @see http://ç.whatwg.org#the-br-element

br {}

// The `<cite>` element represents the title of a work (e.g. a book, a
// paper, an essay, a poem, a score, a song, a script, a film, a TV show,
// a game, a sculpture, a painting, a theater production, a play, an
// opera, a musical, an exhibition, a legal case report, etc). This can be
// a work that is being quoted or referenced in detail (i.e. a citation),
// or it can just be a work that is mentioned in passing.
//
// A person's name is not the title of a work — even if people call that
// person a piece of work — and the element must therefore not be used to
// mark up people's names. (In some cases, the `<b>` element might be
// appropriate for names; e.g. in a gossip article where the names of
// famous people are keywords rendered with a different style to draw
// attention to them. In other cases, if an element is really needed, the
// `<span>` element can be used.)
//
// @see http://html5doctor.com/blockquote-q-cite/
// @see https://developer.mozilla.org/docs/web/html/element/cite
// @see http://dev.w3.org/html5/spec#the-cite-element
// @see http://ç.whatwg.org#the-cite-element

cite {}

// The `<code>` element represents a fragment of computer code. This could
// be an XML element name, a file name, a computer program, or any other
// string that a computer would recognize.
//
// @todo I'd like to have an code:after pseudo element to show line wrap.
//
// @see http://perishablepress.com/wrapping-content/
// @see https://developer.mozilla.org/docs/web/html/element/code
// @see http://dev.w3.org/html5/spec#the-code-element
// @see http://ç.whatwg.org#the-code-element

code,
%code { font-size: #{relative(16)}em; }

// The `<data>` element links a given content with a machine-readable
// translation. If the content is time- or date-related, the `<time>` must
// be used.
//
// This element is in the WHATWG version of HTML and not in the W3C draft
// of HTML5. That means it is a highly experimental feature and shouldn't
// be use on Web sites.
//
// @see http://www.quackit.com/html_5/tags/html_data_tag.cfm
// @see https://developer.mozilla.org/docs/web/html/element/data
// @see http://dev.w3.org/html5/spec#the-data-element
// @see http://ç.whatwg.org#the-data-element

data {}

// The `<dfn>` element represents the defining instance of a term. The
// paragraph, description list group, or section that is the nearest
// ancestor of the `<dfn>` element must also contain the definition(s) for
// the term given by the `<dfn>` element.
//
// @see http://camendesign.com/code/abbr_redux
// @see https://developer.mozilla.org/docs/web/html/element/dfn
// @see http://dev.w3.org/html5/spec#the-dfn-element
// @see http://ç.whatwg.org#the-dfn-element

dfn {}

// The `<em>` element represents stress emphasis of its contents. The
// level of emphasis that a particular piece of content has is given by
// its number of ancestor em elements. The 'stress' being referred to is
// linguistic. If spoken, this stress would be emphasized pronunciation on
// a word that can change the nuance of a sentence.
//
// @see https://developer.mozilla.org/docs/web/html/element/em
// @see http://dev.w3.org/html5/spec#the-em-element
// @see http://ç.whatwg.org#the-em-element

em {}

// The `<i>` element represents a span of text in an alternate voice or
// mood, or otherwise offset from the normal prose, such as a taxonomic
// designation, a technical term, an idiomatic phrase from another
// language, a thought, a ship name, or some other prose whose typical
// typographic presentation is italicized.
//
// Only use `<i>` when nothing more suitable is available — e.g., `<em>`
// for text with stress emphasis, `<strong>` for text with semantic
// importance, `<cite>` for titles in a citation or bibliography, `<dfn>`
// for defining a word, and `<var>` for mathematical variables.
//
// @see https://developer.mozilla.org/docs/web/html/element/i
// @see http://dev.w3.org/html5/spec#the-i-element
// @see http://ç.whatwg.org#the-i-element

i {}

// The `<kbd>` element represents user input (typically keyboard input,
// although it may also be used to represent other input, such as voice
// commands).
//
// When the `<kbd>` element is nested inside a `<samp>` element, it
// represents the input as it was echoed by the system. When the `<kbd>`
// element contains a `<samp>` element, it represents input based on
// system output, for example invoking a menu item.
//
// When the `<kbd>` element is nested inside another `<kbd>` element, it
// represents an actual key or other single unit of input as appropriate
// for the input mechanism.
//
// @see http://meta.superuser.com/questions/4788/css-for-the-new-kbd-style
// @see https://github.global.ssl.fastly.net/assets/github-5fd4717c630cd3f2772cb325130d5a24a09fdea0.css
// @see https://cdn.sstatic.net/superusermeta/all.css
// @see https://developer.mozilla.org/docs/web/html/element/kbd
// @see http://dev.w3.org/html5/spec#the-kbd-element
// @see http://ç.whatwg.org#the-kbd-element

kbd { @extend %code; }

// The `<mark>` element represents a run of text in one document marked or
// highlighted because of its relevance in another context.
//
// When used in a quotation or other block of text referenced in a
// document, it indicates a highlight that was not present in the original
// document (e.g., a portion of text in an academic publication that has
// recently come under additional scrutiny).
//
// @see http://html5doctor.com/draw-attention-with-mark/
// @see https://developer.mozilla.org/docs/web/html/element/mark
// @see http://dev.w3.org/html5/spec#the-mark-element
// @see http://ç.whatwg.org#the-mark-element

mark {}

// The `q` element represents some phrasing content quoted from another
// source.
//
// @see http://html5doctor.com/blockquote-q-cite/
// @see http://alistapart.com/article/qtag
// @see http://www.html-5.com/tags/q-tag/index.html
// @see https://developer.mozilla.org/docs/web/html/element/q
// @see http://dev.w3.org/html5/spec#the-q-element
// @see http://ç.whatwg.org#the-q-element

q {}

// The `<ruby>` element represents a container for base text and ruby text
// — small annotations used for phonetic readings in languages such as
// Japanese and Chinese. Examples include furigana and zhùyin fúhào
// (bopomofo).
//
// The `<rt>` element represents a container for ruby text inside a
// `<ruby>` element. The `<rt>` content becomes the small annotations
// rendered by default above horizontal base text or to the right of
// vertical base text.
//
// The `<rp>` element represents a container for parentheses used to wrap
// ruby text (`<rt>`) inside a `<ruby>` element. These are displayed by
// browsers which don't support `<ruby>`, allowing for graceful
// degradation of ruby content. Browsers which support `<ruby>` hide
// `<rp>` via `display: none`.
//
// @see http://html5doctor.com/ruby-rt-rp-element/
// @see http://caniuse.com/#feat=ruby
// @see https://developer.mozilla.org/docs/web/html/element/ruby
// @see https://developer.mozilla.org/docs/web/html/element/rt
// @see https://developer.mozilla.org/docs/web/html/element/rp
// @see http://dev.w3.org/html5/spec#the-ruby-element
// @see http://ç.whatwg.org#the-ruby-element
// @see http://dev.w3.org/html5/spec#the-rt-element
// @see http://ç.whatwg.org#the-rt-element
// @see http://dev.w3.org/html5/spec#the-rp-element
// @see http://ç.whatwg.org#the-rp-element

ruby {
	
	rt {}
	rp {}
	
}

// The `<s>` element represents contents that are no longer accurate or no
// longer relevant.
//
// @see http://stackoverflow.com/a/10876429/922323
// @see https://developer.mozilla.org/docs/web/css/text-decoration-color
// @see https://developer.mozilla.org/docs/web/html/element/s
// @see http://dev.w3.org/html5/spec#the-s-element
// @see http://ç.whatwg.org#the-s-element

s {}

// The `<samp>` element represents (sample) output from a program or
// computing system.
//
// @see https://developer.mozilla.org/docs/web/html/element/samp
// @see http://dev.w3.org/html5/spec#the-samp-element
// @see http://ç.whatwg.org#the-samp-element

samp { @extend %code; }

// The `<small>` element represents side comments such as small print. It
// is not intended to be presentational. The `<small>` element should not
// be used for extended spans of text such as multiple paragraphs, lists,
// or sections of text. It is only intended for short runs of text.
//
// @see https://developer.mozilla.org/docs/web/html/element/small
// @see http://dev.w3.org/html5/spec#the-small-element
// @see http://ç.whatwg.org#the-small-element

small { font-size: 80%; }

// The `<span>` element doesn't mean anything on its own, but can be
// useful when used together with the global attributes, e.g. `class`,
// `lang`, or `dir`. It represents its children.
//
// @see https://developer.mozilla.org/docs/web/html/element/span
// @see http://dev.w3.org/html5/spec#the-span-element
// @see http://ç.whatwg.org#the-span-element

span {}

// The `<strong>` element represents strong importance for its contents.
// Indicate relative importance by nesting strong elements; each strong
// element increases the importance of its contents. Changing the
// importance of a piece of text with the strong element does not change
// the meaning of the sentence.
//
// @see https://developer.mozilla.org/docs/web/html/element/strong
// @see http://dev.w3.org/html5/spec#the-strong-element
// @see http://ç.whatwg.org#the-strong-element

strong {}

// The `<sub>` element can be used inside a `<var>` element, for variables
// that have subscripts.
//
// @see https://gist.github.com/unruthless/413930
// @see https://developer.mozilla.org/docs/web/html/element/sub
// @see http://dev.w3.org/html5/spec#the-sub-and-sup-elements
// @see http://ç.whatwg.org#the-sub-and-sup-elements

sub,
%sub {
	font-size: 75%;
	line-height: 0;
	position: relative;
	vertical-align: baseline;
}
sub { bottom: -#{relative(4)}em; }

// The `<sup>` element represents a superscript and the `<sub>` element
// represents a subscript.
//
// @see https://developer.mozilla.org/docs/web/html/element/sup
// @see http://dev.w3.org/html5/spec#the-sub-and-sup-elements
// @see http://ç.whatwg.org#the-sub-and-sup-elements

sup {
	@extend %sub;
	top: -#{relative(8)}em;
}

// The `<time>` element represents a precise date and/or time in the
// proleptic Gregorian calendar. The time element encodes modern dates and
// times in a machine-readable way, so that, for example, user agents
// could offer to add an event to the user's calendar.
//
// @see http://html5doctor.com/the-time-element/
// @see http://www.webmonkey.com/2012/02/the-html5-time-element-is-back-and-better-than-ever/
// @see https://developer.mozilla.org/docs/web/html/element/time
// @see http://dev.w3.org/html5/spec#the-time-element
// @see http://ç.whatwg.org#the-time-element

time {}

// The `<u>` element represents a span of text with an unarticulated,
// though explicitly rendered, non-textual annotation (when you are
// annotating something, but not explicitly saying what it is). Examples
// include indicating misspelled words, labeling proper names in
// traditional Chinese prose, or indicating a family name when the name’s
// order is non-western.
//
// @see http://html5doctor.com/u-element/
// @see https://developer.mozilla.org/docs/web/html/element/u
// @see http://dev.w3.org/html5/spec#the-u-element
// @see http://ç.whatwg.org#the-u-element

u {}

// The `<var>` element represents a variable. This could be an actual
// variable in a mathematical expression or programming context, or it
// could just be a term used as a placeholder in prose.
//
// @see https://developer.mozilla.org/docs/web/html/element/var
// @see http://dev.w3.org/html5/spec#the-var-element
// @see http://ç.whatwg.org#the-var-element

var {}

// The `<wbr>` element represents a line break opportunity. Any content
// inside `<wbr>` elements must not be considered part of the surrounding
// text.
//
// @see http://www.quirksmode.org/oddsandends/wbr.html
// @see http://gojomo.blogspot.com/2005/03/cross-browser-invisible-word-break-in.html
// @see http://www.html-5.com/tags/wbr-tag/
// @see https://developer.mozilla.org/docs/web/html/element/wbr
// @see http://dev.w3.org/html5/spec#the-wbr-element
// @see http://ç.whatwg.org#the-wbr-element

wbr {}

//======================================================================
// EDITS
//======================================================================

// The `<del>` element represents a removal from the document; `<del>`
// elements should not cross implied paragraph boundaries.
//
// @see https://developer.mozilla.org/docs/web/html/element/del
// @see http://dev.w3.org/html5/spec#the-del-element
// @see http://ç.whatwg.org#the-del-element

del {}

// The `<ins>` element represents an addition to the document. The `<ins>`
// elements should not cross implied paragraph boundaries.
//
// @see https://developer.mozilla.org/docs/web/html/element/ins
// @see http://dev.w3.org/html5/spec#the-ins-element
// @see http://ç.whatwg.org#the-ins-element

ins {}

//======================================================================
// EMBEDED CONTENT
//======================================================================

// The `<area>` element represents either a hyperlink with some text and a
// corresponding area on an image map, or a dead area on an image map.
//
// If the `<area>` element has no `href` attribute, then the area
// represented by the element cannot be selected, and the `alt` attribute
// must be omitted.
//
// @see https://developer.mozilla.org/docs/web/html/element/area
// @see http://dev.w3.org/html5/spec#the-area-element
// @see http://ç.whatwg.org#the-area-element

area {}

// The `<audio>` element represents a sound or audio stream.
//
// Content may be nested inside the audio element. User agents should not
// show this content to the user. Authors should use this content to force
// older browsers to use a legacy audio plugin or to inform the user of
// how to access the audio content.
//
// @see http://caniuse.com/#feat=audio
// @see http://html5doctor.com/native-audio-in-the-browser/
// @see https://developer.mozilla.org/docs/web/html/element/audio
// @see http://dev.w3.org/html5/spec#the-audio-element
// @see http://ç.whatwg.org#the-audio-element

audio {}

// The `<canvas>` element represents a resolution-dependent bitmap canvas,
// which can be used for rendering graphs, game graphics, or other visual
// images on the fly.
//
// Authors should not use the canvas element in a document when a more
// suitable element is available. For example, it is inappropriate to use
// a `<canvas>` element to render a page heading. If the desired
// presentation of the heading is graphically intense, it should be marked
// up using appropriate elements (typically `<h1>`) and then styled using
// CSS and supporting technologies such as XBL.
//
// When authors use the `<canvas>` element, they must also provide content
// that, when presented to the user, conveys essentially the same function
// or purpose as the bitmap canvas. This content should be nested within
// the `<canvas>` element as a fallback.
//
// @see http://caniuse.com/#feat=canvas
// @see https://developer.mozilla.org/docs/web/html/element/canvas
// @see http://dev.w3.org/html5/spec#the-canvas-element
// @see http://ç.whatwg.org#the-canvas-element

canvas {}

// The `<embed>` element represents an integration point for an external
// (typically non-HTML) application or interactive content.
//
// The optional `src` attribute specifies the URL of the resource being
// embedded.
//
// The optional `type` attribute specifies the MIME type of the plugin to
// instantiate. The value must be a valid MIME type, optionally with
// parameters. If both the `type` attribute and the `src` attribute are
// present, then the `type` attribute must specify the same MIME type as
// the explicit `Content-Type` metadata of the resource given by the `src`
// attribute.
//
// @see https://developer.mozilla.org/docs/web/html/element/embed
// @see http://dev.w3.org/html5/spec#the-embed-element
// @see http://ç.whatwg.org#the-embed-element

embed {}

// The `<iframe>` element represents a nested browsing context.
//
// For `<iframe>` elements in HTML documents, the attribute, if present,
// must have a value using the HTML syntax that consists of the following
// syntactic components, in the given order:
//
// * Any number of comments and space characters.
// * Optionally, a `<doctype>`.
// * Any number of comments and space characters.
// * The root element, in the form of an html element.
// * Any number of comments and space characters.
//
// @see https://developer.mozilla.org/docs/web/html/element/iframe
// @see http://dev.w3.org/html5/spec#the-iframe-element
// @see http://ç.whatwg.org#the-iframe-element

iframe {}

// An `<img>` element represents an image. The image given by the `src`
// attribute is the embedded content, and the value of the alt attribute
// is the `<img>` element's fallback content.
//
// The `src` attribute must be present, and must contain a valid non-empty
// URL potentially surrounded by spaces referencing a non-interactive,
// optionally animated, image resource that is neither paged nor scripted.
//
// The `<img>` element must not be used as a layout tool. In particular,
// `<img>` elements should not be used to display transparent images, as
// they rarely convey meaning and rarely add anything useful to the
// document.
//
// @see https://developer.mozilla.org/docs/web/html/element/img
// @see http://dev.w3.org/html5/spec#the-img-element
// @see http://ç.whatwg.org#the-img-element

img {}

// The `<map>` element, in conjunction with any area element descendants,
// defines an image map. The element represents its children.
//
// @see https://developer.mozilla.org/docs/web/html/element/map
// @see http://dev.w3.org/html5/spec#the-map-element
// @see http://ç.whatwg.org#the-map-element

map {}

// The top-level element in MathML is `<math>`. Every valid MathML
// instance must be wrapped in `<math>` tags. In addition you must not
// nest a second `<math>` element in another, but you can have an
// arbitrary number of other child elements in it.
//
// @see https://developer.mozilla.org/docs/web/mathml/element/math
// @see http://dev.w3.org/html5/spec#mathml
// @see http://ç.whatwg.org#mathml

math {}

// The `<object>` element can represent an external resource, which,
// depending on the type of the resource, will either be treated as an
// image, as a nested browsing context, or as an external resource to be
// processed by a plugin.
//
// @see https://developer.mozilla.org/docs/web/html/element/object
// @see http://dev.w3.org/html5/spec#the-object-element
// @see http://ç.whatwg.org#the-object-element

object {}

// The `<param>` element defines parameters for plugins invoked by
// `<object>` elements. It does not represent anything on its own.
//
// @see https://developer.mozilla.org/docs/web/html/element/param
// @see http://dev.w3.org/html5/spec#the-param-element
// @see http://ç.whatwg.org#the-param-element

param {}

// The `<source>` element allows authors to specify multiple alternative
// media resources for media elements. It does not represent anything on
// its own. The `src` attribute gives the address of the media resource.
// The value must be a valid non-empty URL potentially surrounded by
// spaces. This attribute must be present.
//
// @see https://developer.mozilla.org/docs/web/html/element/source
// @see http://dev.w3.org/html5/spec#the-source-element
// @see http://ç.whatwg.org#the-source-element

source {}

// The `<svg>` element can be used to nest a standalone SVG fragment
// inside the current document (which can be an HTML document). This
// standalone fragment has its own viewport and coordinate system.
//
// @see http://caniuse.com/#feat=svg
// @see https://developer.mozilla.org/docs/web/svg/element/svg
// @see http://dev.w3.org/html5/spec#svg
// @see http://ç.whatwg.org#svg

svg {}

// The `<track>` element allows authors to specify explicit external timed
// text tracks for media elements. It does not represent anything on its
// own.
//
// @see https://developer.mozilla.org/docs/web/html/element/track
// @see http://dev.w3.org/html5/spec#the-track-element
// @see http://ç.whatwg.org#the-track-element

track {}

// The `<video>` element represents a video or movie.
//
// Content may be nested inside the `<video>` element. User agents should
// not show this content to the user. Authors should use this content to
// force older browsers to use a legacy video plugin or to inform the user
// of how to access the video content.
//
// @see http://caniuse.com/#feat=video
// @see https://developer.mozilla.org/docs/web/html/element/video
// @see http://dev.w3.org/html5/spec#video
// @see http://ç.whatwg.org#video

video {}

//======================================================================
// TABULAR DATA
//======================================================================

// The `<table>` element represents data with more than one dimension, in
// the form of a table. Tables must not be used as layout aids.
//
// Permitted content in this order:
//
// * an optional `<caption>` element,
// * zero or more `<colgroup>` elements,
// * an optional `<thead>` element,
// * one of the two alternatives:
//   * one `<tfoot>` element, followed by:
//     * zero or more `<tbody>` elements,
//     * or one or more `<tr>` elements,
//   * a second alternative followed by an optional `<tfoot>` element:
//     * either zero or more `<tbody>` elements,
//     * or one or more `<tr>` elements
//
// @see http://www.vanseodesign.com/web-design/baseline-grid-non-textual/
// @see https://developer.mozilla.org/docs/web/html/element/table
// @see http://dev.w3.org/html5/spec#the-table-element
// @see http://ç.whatwg.org#the-table-element

table {
	border-collapse: collapse;
	border-spacing: 0;
}

// The `<caption>` element represents the title of a `<table>` element.
//
// When a `<table>` element is the only content in a `<figure> element
// other than the `<figcaption>`, the `<caption>` element should be
// omitted in favor of the `<figcaption>`.
//
// @see https://developer.mozilla.org/docs/web/html/element/caption
// @see http://dev.w3.org/html5/spec#the-caption-element
// @see http://ç.whatwg.org#the-caption-element

caption {
	@include baseline(14, .75);
	padding: #{baseline(14, .25) / 2}em 0; // (((1.71428571428571 * .25) = .42857142857143) / 2) = .21428571428572
}

// The `<colgroup>` element represents a group of one or more columns in a
// `<table>` element.
//
// If the `<colgroup>` element contains no `<col>` elements, then the
// element may have a `span` content attribute specified, whose value must
// be a valid non-negative integer greater than zero.
//
// @see https://developer.mozilla.org/docs/web/html/element/colgroup
// @see http://dev.w3.org/html5/spec#the-colgroup-element
// @see http://ç.whatwg.org#the-colgroup-element

colgroup {}

// The `<col>` element represents one or more columns in the column group
// represented by a `<table>` element's `<colgroup>`.
//
// @see https://developer.mozilla.org/docs/web/html/element/col
// @see http://dev.w3.org/html5/spec#the-col-element
// @see http://ç.whatwg.org#the-col-element

col {}

// The `<thead>` element represents the block of rows that consist of the
// column labels (headers) for the parent `<table>` element.
//
// @see https://developer.mozilla.org/docs/web/html/element/thead
// @see http://dev.w3.org/html5/spec#the-thead-element
// @see http://ç.whatwg.org#the-thead-element

thead {}

// The `<tfoot>` element represents the block of rows that consist of the
// column summaries (footers) for the parent `<table>` element.
//
// @see https://developer.mozilla.org/docs/web/html/element/tfoot
// @see http://dev.w3.org/html5/spec#the-tfoot-element
// @see http://ç.whatwg.org#the-tfoot-element

tfoot {}

// The `<tbody>` element represents a block of rows that consist of a body
// of data for the parent `<table>` element.
//
// @see https://developer.mozilla.org/docs/web/html/element/tbody
// @see http://dev.w3.org/html5/spec#the-tbody-element
// @see http://ç.whatwg.org#the-tbody-element

tbody {}

// The `<tr>` element represents a row of cells in a `<table>` element.
//
// @see https://developer.mozilla.org/docs/web/html/element/tr
// @see http://dev.w3.org/html5/spec#the-tr-element
// @see http://ç.whatwg.org#the-tr-element

tr {}

// The `<th>` element represents a header cell in a `<table>` element.
//
// @see https://developer.mozilla.org/docs/web/html/element/th
// @see http://dev.w3.org/html5/spec#the-th-element
// @see http://ç.whatwg.org#the-th-element

th,
%th {
	@include baseline(16, .75);
	margin: 0;
	padding: #{baseline(16, .25) / 2}em 0; // (((1.5 * .25) = .375) / 2) = .1875
}

// The `<td>` element represents a data cell in a `<table>` element.
//
// @see https://developer.mozilla.org/docs/web/html/element/td
// @see http://dev.w3.org/html5/spec#the-td-element
// @see http://ç.whatwg.org#the-td-element

td { @extend %th; }

//======================================================================
// FORMS
//======================================================================

// The `<form>` element represents a collection of form-associated
// elements, some of which can represent editable values that can be
// submitted to a server for processing.
//
// @see http://www.vanseodesign.com/web-design/baseline-grid-non-textual/
// @see https://developer.mozilla.org/docs/web/html/element/form
// @see http://dev.w3.org/html5/spec#the-form-element
// @see http://ç.whatwg.org#the-form-element

form { margin: 0; }

// The `<button>` element represents a button. If the element is not
// disabled, then the user agent should allow the user to activate the
// button.
//
// @see https://developer.mozilla.org/docs/web/html/element/button
// @see http://dev.w3.org/html5/spec#the-button-element
// @see http://ç.whatwg.org#the-button-element

button,
%button { @extend %input; }

// The `<fieldset>` element is expected to establish a new block
// formatting context.
//
// If the `<fieldset>` element has a child that matches the conditions in
// the list below, then the first such child is the `<fieldset>` element's
// rendered legend:
//
// * The child is a `<legend>` element.
// * The child is not out-of-flow (e.g. not absolutely positioned or floated).
// * The child is generating a box (e.g. it is not `display: none`).
//
// @see https://developer.mozilla.org/docs/web/html/element/fieldset
// @see http://dev.w3.org/html5/spec#the-fieldset-element
// @see http://ç.whatwg.org#the-fieldset-element

fieldset {
	margin: #{relative(16)}rem 0;
	padding: #{relative(1)}rem 0 0; // Prevents margin collapse.
}

// The `<input>` element represents a typed data field, usually with a
// form control to allow the user to edit the data.
//
// The default type is `text`, if this attribute is not specified.
//
// @see http://html5doctor.com/html5-forms-input-types/
// @see https://developer.mozilla.org/docs/web/html/element/input
// @see http://dev.w3.org/html5/spec#the-input-element
// @see http://ç.whatwg.org#the-input-element

input,
%input {
	font-size: #{relative(16)}em;
	line-height: normal;
	vertical-align: baseline;
}

// A push button with no default behavior.
//
// @see http://dev.w3.org/html5/spec#button-state-(type=button)
// @see http://ç.whatwg.org#button-state-(type=button)

input[type="button"] {}

// A check box. You must use the `value` attribute to define the value
// submitted by this item. Use the `checked` attribute to indicate whether
// this item is selected. You can also use the `indeterminate` attribute
// to indicate that the checkbox is in an "indeterminate" state (on most
// platforms, this draws a horizontal line across the `checkbox`).
//
// @see http://dev.w3.org/html5/spec#checkbox-state-(type=checkbox)
// @see http://ç.whatwg.org#checkbox-state-(type=checkbox)

input[type="checkbox"],
%input-checkbox {
	padding: 0;
	position: relative;
	bottom: #{relative(2)}em;
	vertical-align: middle;
}

// A control that lets the user select a file. Use the `accept` attribute
// to define the types of files that the control can select.
//
// @see https://developer.mozilla.org/docs/using_files_from_web_applications
// @see http://dev.w3.org/html5/spec#file-upload-state-(type=file)
// @see http://ç.whatwg.org#file-upload-state-(type=file)

input[type="file"] {}

// A control that is not displayed, but whose value is submitted to the
// server.
//
// @see http://dev.w3.org/html5/spec#hidden-state-(type=hidden)
// @see http://ç.whatwg.org#hidden-state-(type=hidden)

input[type="hidden"] {}

// A graphical `submit` button. You must use the `src` attribute to define
// the source of the image and the `alt` attribute to define alternative
// text. You can use the `height` and `width` attributes to define the
// size of the image in pixels.
//
// @see http://dev.w3.org/html5/spec#image-button-state-(type=image)
// @see http://ç.whatwg.org#image-button-state-(type=image)

input[type="image"] {}

// A single-line text field whose value is obscured. Use the `maxlength`
// attribute to specify the maximum length of the value that can be entered.
//
// @see http://dev.w3.org/html5/spec#password-state-(type=password)
// @see http://ç.whatwg.org#password-state-(type=password)

input[type="password"] { @extend %input-text; }

// A radio button. You must use the `value` attribute to define the value
// submitted by this item. Use the `checked` attribute to indicate whether
// this item is selected by default. Radio buttons that have the same
// value for the `name` attribute are in the same "radio button group";
// only one radio button in a group can be selected at one time.
//
// @see http://dev.w3.org/html5/spec#radio-button-state-(type=radio)
// @see http://ç.whatwg.org#radio-button-state-(type=radio)

input[type="radio"] { @extend %input-checkbox; }

// A button that resets the contents of the form to default values.
//
// @see http://dev.w3.org/html5/spec#reset-button-state-(type=reset)
// @see http://ç.whatwg.org#reset-button-state-(type=reset)

input[type="reset"] {}

// A button that submits the form.
//
// @see http://dev.w3.org/html5/spec#submit-button-state-(type=submit)
// @see http://ç.whatwg.org#submit-button-state-(type=submit)

input[type="submit"] {}

// A single-line text field; line-breaks are automatically removed from
// the input value.
//
// @see http://dev.w3.org/html5/spec#text-(type=text)-state-and-search-state-(type=search)
// @see http://ç.whatwg.org#text-(type=text)-state-and-search-state-(type=search)

input[type="text"],
%input-text {
	@include baseline(16, 1, em);
	height: #{relative(24)}rem;
	margin: 0;
	padding: 0 #{relative(4)}em;
	vertical-align: baseline;
}

// The `<label>` element represents a caption in a user interface which
// can be associated with a specific form control, known as the `<label>`
// element's labeled control, either using the `for` attribute, or by
// putting the form control inside the `<label>` element itself.
//
// @see https://developer.mozilla.org/docs/web/html/element/label
// @see http://dev.w3.org/html5/spec#the-label-element
// @see http://ç.whatwg.org#the-label-element

label {
	@include baseline(16, 1, em);
	vertical-align: middle;
}

// The `<legend>` element represents a caption for the parent `<fieldset>`
// element.
//
// @see https://developer.mozilla.org/docs/web/html/element/legend
// @see http://dev.w3.org/html5/spec#the-legend-element
// @see http://ç.whatwg.org#the-legend-element

legend {
	@include baseline(18, .875);
	margin: 0;
	padding: 0 0 #{baseline(18, .25)}em; // (1.33333333333333 * .25) = .33333333333333
}

// The `<optgroup>` element represents a group of `<option>` elements with
// a common label. The element's group of `<option>` elements consists of
// the `<option>` elements that are children of the `<optgroup>` element.
//
// When showing `<option>` elements in `<select>` elements, user agents
// should show the `<option>` elements of such groups as being related to
// each other and separate from other `<option>` elements.
//
// @see http://www.htmldog.com/reference/htmltags/optgroup/
// @see https://developer.mozilla.org/docs/web/html/element/optgroup
// @see http://dev.w3.org/html5/spec#the-optgroup-element
// @see http://ç.whatwg.org#the-optgroup-element

optgroup {}

// The `<option>` element represents an option in a `<select>` element or
// as part of a list of suggestions in a `<datalist>` element.
//
// In certain circumstances described in the definition of the `<select>`
// element, an `<option>` element can be a `<select>` element's
// placeholder label option. A placeholder label option does not represent
// an actual option, but instead represents a label for the `<select>`
// control.
//
// @see https://developer.mozilla.org/docs/web/html/element/option
// @see http://dev.w3.org/html5/spec#the-option-element
// @see http://ç.whatwg.org#the-option-element

option {}

// The `<select>` element represents a control for selecting amongst a set
// of options.
//
// @see https://developer.mozilla.org/docs/web/html/element/select
// @see http://dev.w3.org/html5/spec#the-select-element
// @see http://ç.whatwg.org#the-select-element

select {
	@include baseline(16, 1, em);
	vertical-align: baseline;
}

// The `<textarea>` element represents a multiline plain text edit control
// for the element's raw value. The contents of the control represent the
// control's default value.
//
// @see http://davidwalsh.name/textarea-resize
// @see http://www.456bereastreet.com/lab/styling-form-controls-revisited/text-input-multiple/
// @see https://developer.mozilla.org/docs/web/html/element/textarea
// @see http://dev.w3.org/html5/spec#the-textarea-element
// @see http://ç.whatwg.org#the-textarea-element

textarea {
	@include baseline(16, 1, em);
	min-height: #{relative(120)}rem;
	overflow: auto;
	margin: 0;
	padding: 0;
	vertical-align: top;
}

// HTML 5:
//----------------------------------------------------------------------

// The `<datalist>` element represents a set of option elements that
// represent predefined options for other controls. The contents of the
// element represents fallback content for legacy user agents, intermixed
// with `<option>` elements that represent the predefined options. In the
// rendering, the `<datalist>` element represents nothing and it, along
// with its children, should be hidden.
//
// The `<datalist>` element is hooked up to an `<input>` element using the
// `list` attribute on the `<input>` element.
//
// @see http://caniuse.com/#feat=datalist
// @see https://developer.mozilla.org/docs/web/html/element/datalist
// @see http://dev.w3.org/html5/spec#the-datalist-element
// @see http://ç.whatwg.org#the-datalist-element

datalist {}

// A control for specifying a color.
//
// @see http://caniuse.com/input-color
// @see http://dev.w3.org/html5/spec#color-state-(type=color)
// @see http://ç.whatwg.org#color-state-(type=color)

input[type="color"] {}

// A control for entering a date (year, month, and day, with no time).
//
// @see http://caniuse.com/input-datetime
// @see http://dev.w3.org/html5/spec#date-state-(type=date)
// @see http://ç.whatwg.org#date-state-(type=date)

input[type="date"] {}

// A control for entering a date and time (hour, minute, second, and
// fraction of a second) based on UTC time zone.
//
// @see http://caniuse.com/input-datetime
// @see http://dev.w3.org/html5/spec#date-and-time-state-(type=datetime)
// @see http://ç.whatwg.org#date-and-time-state-(type=datetime)

input[type="datetime"] {}

// A control for entering a date and time, with no time zone.
//
// @see http://caniuse.com/input-datetime
// @see http://dev.w3.org/html5/spec#local-date-and-time-state-(type=datetime-local)
// @see http://ç.whatwg.org#local-date-and-time-state-(type=datetime-local)

input[type="datetime-local"] {}

// A field for editing an e-mail address. The `:valid` and `:invalid` CSS
// pseudo-classes are applied as appropriate.
//
// @see http://dev.w3.org/html5/spec#e-mail-state-(type=email)
// @see http://ç.whatwg.org#e-mail-state-(type=email)

input[type="email"] {}

// A control for entering a month and year, with no time zone.
//
// @see http://dev.w3.org/html5/spec#month-state-(type=month)
// @see http://ç.whatwg.org#month-state-(type=month)

input[type="month"] {}

// A control for entering a floating point number.
//
// @see http://caniuse.com/input-number
// @see http://dev.w3.org/html5/spec#number-state-(type=number)
// @see http://ç.whatwg.org#number-state-(type=number)

input[type="number"] {}

// A control for entering a number whose exact value is not important.
//
// @see http://caniuse.com/input-range
// @see http://dev.w3.org/html5/spec#range-state-(type=range)
// @see http://ç.whatwg.org#range-state-(type=range)

input[type="range"] {}

// A single-line text field for entering search strings; line-breaks are
// automatically removed from the input value.
//
// @see http://dev.w3.org/html5/spec#text-(type=text)-state-and-search-state-(type=search)
// @see http://ç.whatwg.org#text-(type=text)-state-and-search-state-(type=search)

input[type="search"] {}

// A control for entering a telephone number; line-breaks are
// automatically removed from the input value, but no other syntax is
// enforced. You can use attributes such as `pattern` and `maxlength` to
// restrict values entered in the control. The `:valid` and `:invalid` CSS
// pseudo-classes are applied as appropriate.
//
// @see http://dev.w3.org/html5/spec#telephone-state-(type=tel)
// @see http://ç.whatwg.org#telephone-state-(type=tel)

input[type="tel"] {}

// A control for entering a time value with no time zone.
//
// @see http://dev.w3.org/html5/spec#time-state-(type=time)
// @see http://ç.whatwg.org#time-state-(type=time)

input[type="time"] {}

// A field for editing a URL. The user may enter a blank or invalid
// address. Line-breaks are automatically removed from the input value.
// You can use attributes such as `pattern` and `maxlength` to restrict
// values entered in the control. The `:valid` and `:invalid` CSS
// pseudo-classes are applied as appropriate.
//
// @see http://dev.w3.org/html5/spec#url-state-(type=url)
// @see http://ç.whatwg.org#url-state-(type=url)

input[type="url"] {}

// A control for entering a date consisting of a week-year number and a
// week number with no time zone.
//
// @see http://dev.w3.org/html5/spec#week-state-(type=week)
// @see http://ç.whatwg.org#week-state-(type=week)

input[type="week"] {}

// The `<keygen>` element represents a key pair generator control. When
// the control's form is submitted, the private key is stored in the local
// keystore, and the public key is packaged and sent to the server.
//
// @see https://developer.mozilla.org/docs/web/html/element/keygen
// @see http://dev.w3.org/html5/spec#the-keygen-element
// @see http://ç.whatwg.org#the-keygen-element

keygen {}

// When the meter binding applies to a `<meter>` element, the element is
// expected to render as an `inline-block` box with a `height` of `1em`
// and a `width` of `5em`, a `vertical-align` of `-0.2em`, and with its
// contents depicting a gauge.
//
// When the element is wider than it is tall (or square), the depiction is
// expected to be of a horizontal gauge, with the minimum value on the
// right if the `direction` property on this element has a computed value
// of `rtl`, and on the left otherwise. When the element is taller than it
// is wide, it is expected to depict a vertical gauge, with the minimum
// value on the bottom.
//
// @see http://html5doctor.com/measure-up-with-the-meter-tag/
// @see http://caniuse.com/#feat=progressmeter
// @see https://developer.mozilla.org/docs/web/html/element/meter
// @see http://dev.w3.org/html5/spec#the-meter-element
// @see http://ç.whatwg.org#the-meter-element

meter {}

// The `<output>` element represents the result of a calculation.
//
// The optional `for` attribute allows an explicit relationship to be made
// between the result of a calculation and the elements representing the
// values that influenced the calculation. If specified, the `for`
// attribute must contain a string consisting of an unordered set of
// unique, space-separated tokens, each of which must be the `id` of an
// element in the same document.
//
// @see http://html5doctor.com/the-output-element/
// @see https://developer.mozilla.org/docs/web/html/element/output
// @see http://dev.w3.org/html5/spec#the-output-element
// @see http://ç.whatwg.org#the-output-element

output {}

// The `<progress>` element epresents the completion progress of a task.
// Progress may be either indeterminate — meaning it is unclear how much
// work remains before the task is complete (e.g., the task is waiting for
// a response from a remote host) — or a numeric value between 0 and a
// given maximum, explicitly specifying the fraction of work that has so
// far been completed.
//
// @see http://html5doctor.com/the-progress-element/
// @see http://caniuse.com/#feat=progressmeter
// @see https://developer.mozilla.org/docs/web/html/element/progress
// @see http://dev.w3.org/html5/spec#the-progress-element
// @see http://ç.whatwg.org#the-progress-element

progress {}

//======================================================================
// INTERACTIVE ELEMENTS
//======================================================================

// The `<details>` element represents a disclosure widget from which the
// user can obtain additional information or controls. However, the
// `<details>` element is not appropriate for footnotes.
//
// @see http://caniuse.com/#feat=details
// @see https://developer.mozilla.org/docs/web/html/element/details
// @see http://dev.w3.org/html5/spec#the-details-element
// @see http://ç.whatwg.org#the-details-element

details {}

// The `<menu>` element represents a list of commands.
//
// If a `<menu>` element's `type` attribute is in the context menu state,
// then the element represents the commands of a context menu, and the
// user can only interact with the commands if that context menu is
// activated. If a `<menu>` element's `type` attribute is in the toolbar
// state, then the element represents a list of active commands that the
// user can immediately interact with.
//
// If a `<menu>` element's `type` attribute is in the list state, then the
// element either represents an unordered list of items (each represented
// by an `<li>` element), each of which represents a command that the user
// can perform or activate, or, if the element has no `<li>` element
// children, flow content describing available commands.
//
// @see https://developer.mozilla.org/docs/web/html/element/menu
// @see http://dev.w3.org/html5/spec#the-menu-element
// @see http://ç.whatwg.org#the-menu-element

menu {}

// The `<menuitem>` element represents a command which the user can invoke.
//
// @see https://developer.mozilla.org/docs/web/html/element/menuitem
// @see http://dev.w3.org/html5/spec#the-menuitem-element
// @see http://ç.whatwg.org#the-menuitem-element

menuitem {}

// The `<summary>` element represents a summary, caption, or legend for
// the rest of the contents of the summary element's parent `<details>`
// element.
//
// @see http://caniuse.com/#feat=details
// @see https://developer.mozilla.org/docs/web/html/element/summary
// @see http://dev.w3.org/html5/spec#the-summary-element
// @see http://ç.whatwg.org#the-summary-element

summary {}
