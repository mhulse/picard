//======================================================================
// Mixins:
//======================================================================

// Simple baseline mixin.
//
// Usage:
//
// ```
// @import "mixins";
// .foo {
//     @include rex_baseline($size: 16, $offset: .75, $optional: "italic", $family: "Arial, sans-serif");
//     @include rex_baseline($size: 16, $offset: .75, $optional: "bold");
//     @include rex_baseline($size: 16, $offset: .75, $family: "Georgia, serif");
//     @include rex_baseline($size: 16, $offset: .75);
//     @include rex_baseline($size: 16);
// }
// ```
//
// Output:
//
// ```
// .foo {
//     font: italic 1rem/1.125 Arial, sans-serif;
//     font: bold 1rem/1.125;
//     font: 1rem/1.125 Georgia, serif;
//     font-size: 1rem;
//     line-height: 1.125;
//     font-size: 1rem;
//     line-height: 1.5;
//     margin: 0.75rem 0;
// }
//
// @see http://stackoverflow.com/questions/3525007
// @see http://stackoverflow.com/a/12523209/922323
// @see http://www.impressivewebs.com/css-font-shorthand-property-cheat-sheet/
//
// Important:
// IE10 not recognizing font decloration when rem is used as font-size unit
// of measure.
// @see https://connect.microsoft.com/IE/feedback/details/772679
// @see https://github.com/mhulse/rex/issues/142
// Solution:
// Don't use font shorthand when using `rem`.
//
// @param { number } $size The `font-size`.
// @param { number } $offset Baseline offset.
// @param { string } $unit The `font-size` unit.
// @param { string } $optional Font shorthand "optionals".
// @param { string } $family The `font-family`.
// @return { string } Longhand `font-family` and `line-height` or shorthand `font`.

@mixin rex_baseline($size, $offset: 1, $unit: rem, $optional: null, $family: null) {
	
	$font-size: #{rex_relative($size)}$unit;
	$line-height: rex_baseline($size, $offset);
	
	@if $optional or $family {
		
		font: unquote($optional) $font-size/$line-height unquote($family);
		
	} @else {
		
		font-size: $font-size;
		line-height: $line-height;
		
	}
	
}
	// Shorthand:
	@mixin rex_bl($size, $offset: 1, $unit: rem, $optional: null, $family: null) {
		
		@include rex_baseline($size, $offset, $unit, $optional, $family);
		
	}

// Baseline grid css.
//
// Usage:
//
// `.foo { @include rex_baseline-grid; }`

@mixin rex_baseline-grid {
	
	// For positioning of pseudo elements:
	position: relative;
	
	// Show the mouse as a hand:
	cursor: pointer;
	cursor: hand;
	
	// Disable selection in WebKit/iOS:
	-webkit-highlight: none;
	-webkit-tap-highlight-color: rgba(0, 0, 0, 0);
	-webkit-touch-callout: none;
	-webkit-user-drag: none;
	-webkit-user-modify: none;
	-webkit-user-select: none;
	 -khtml-user-select: none;
	   -moz-user-select: none;
	    -ms-user-select: none;
	     -o-user-select: none;
	        user-select: none;
	
	// Grid overlay:
	&::before {
		
		background: {
			
			image: -webkit-linear-gradient(rgba($rex_baseline-major-grid-color, .75) 1px, transparent 1px),
			       -webkit-linear-gradient(rgba($rex_baseline-minor-grid-color, .75) 1px, transparent 1px),
			       -webkit-linear-gradient(rgba($rex_baseline-minor-grid-color, .25) 1px, transparent 1px);
			
			image: -moz-linear-gradient(rgba($rex_baseline-major-grid-color, .25) 1px, transparent 1px),
			       -moz-linear-gradient(rgba($rex_baseline-minor-grid-color, .75) 1px, transparent 1px),
			       -moz-linear-gradient(rgba($rex_baseline-minor-grid-color, .25) 1px, transparent 1px);
			
			image: linear-gradient(rgba($rex_baseline-major-grid-color, .75) 1px, transparent 1px),
			       linear-gradient(rgba($rex_baseline-minor-grid-color, .75) 1px, transparent 1px),
			       linear-gradient(rgba($rex_baseline-minor-grid-color, .25) 1px, transparent 1px);
			
			size: 100% #{rex_relative($rex_base-line-height)}rem,     // Match base `line-height`.
			      100% #{rex_relative($rex_base-line-height) / 2}rem, // Half base `line-height`.
			      100% #{rex_relative($rex_base-line-height) / 4}rem; // Quarter base `line-height`.
			
			position: 0 0;       // Put line adjustments here.
			origin: content-box; // Regardless of padding, background will begin in the corner of the box.
			attachment: local;   // For scrolling.
			
		}
		
		width: 100%;
		display: block;
		position: absolute;
		top: 0;
		bottom: -1px; // Allows for the bottom-most border to show.
		z-index: 999; // Above all other content.
		content: "";
		pointer-events: none; // The element is never the target of mouse events.
		
	}
	
	// On click, hide grid:
	&:active::before { display: none; }
	
	// On click, add a faux border to child elements to view where they begin/end in relationship to the baseline:
	&:active * { box-shadow: inset 0 0 0 1px rgba($rex_baseline-outline-color, .5); }
	
}
	// Shorthand:
	@mixin rex_blg {
		
		@include rex_baseline-grid;
		
	}
